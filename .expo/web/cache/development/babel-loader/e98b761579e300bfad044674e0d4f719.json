{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Pressable from \"react-native-web/dist/exports/Pressable\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport styles from \"./styles\";\nimport { withAuthenticator } from \"aws-amplify-react-native\";\nimport { Auth, Storage, API, graphqlOperation } from \"aws-amplify\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport { colors } from \"../../modal/color\";\nimport { Octicons } from \"@expo/vector-icons\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useRoute } from \"@react-navigation/native\";\nimport \"react-native-get-random-values\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { createListing } from \"../../graphql/mutations\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\n\nvar Listing = function Listing() {\n  var navigation = useNavigation();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      imageData = _useState2[0],\n      setImageData = _useState2[1];\n\n  var _useState3 = useState({\n    catID: 0,\n    catName: \"Category\"\n  }),\n      _useState4 = _slicedToArray(_useState3, 2),\n      category = _useState4[0],\n      setCategory = _useState4[1];\n\n  var _useState5 = useState({\n    locID: 0,\n    locName: \"Location\"\n  }),\n      _useState6 = _slicedToArray(_useState5, 2),\n      Location = _useState6[0],\n      setLocation = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      title = _useState8[0],\n      setTitle = _useState8[1];\n\n  var _useState9 = useState(\"\"),\n      _useState10 = _slicedToArray(_useState9, 2),\n      description = _useState10[0],\n      setDescription = _useState10[1];\n\n  var _useState11 = useState(\"\"),\n      _useState12 = _slicedToArray(_useState11, 2),\n      rentValue = _useState12[0],\n      setRentValue = _useState12[1];\n\n  var _useState13 = useState(\"\"),\n      _useState14 = _slicedToArray(_useState13, 2),\n      userID = _useState14[0],\n      setUserID = _useState14[1];\n\n  var _useState15 = useState(\"\"),\n      _useState16 = _slicedToArray(_useState15, 2),\n      userEmail = _useState16[0],\n      setUserEmail = _useState16[1];\n\n  var _useState17 = useState(\"\"),\n      _useState18 = _slicedToArray(_useState17, 2),\n      postSuccess = _useState18[0],\n      setPostSuccess = _useState18[1];\n\n  var _useState19 = useState(false),\n      _useState20 = _slicedToArray(_useState19, 2),\n      postProcessing = _useState20[0],\n      setPostProcessing = _useState20[1];\n\n  useEffect(function () {\n    if (postSuccess !== \"\") {\n      setPostProcessing(false);\n      Alert.alert(\"Success\", postSuccess, [{\n        text: \"Ok\",\n        onPress: function onPress() {\n          return navigation.navigate(\"Home\", {\n            screen: \"Explore\"\n          });\n        }\n      }]);\n    }\n  }, [postSuccess]);\n  Auth.currentAuthenticatedUser().then(function (user) {\n    console.log(\"user id is: \", user.attributes.sub);\n    setUserID(user.attributes.sub);\n    setUserEmail(user.attributes.email);\n  }).catch(function (err) {\n    console.log(err);\n    throw err;\n  });\n  var route = useRoute();\n  useEffect(function () {\n    if (!route.params) {\n      console.log(\"There is no data in route\");\n    } else {\n      if (route.params.imageData !== undefined) {\n        setImageData(route.params.imageData);\n      } else if (route.params.catID !== undefined) {\n        setCategory(route.params);\n      } else if (route.params.locID !== undefined) {\n        setLocation(route.params);\n      }\n    }\n  });\n  var imageAllUrl = [];\n\n  var storeToDB = function storeToDB() {\n    return _regeneratorRuntime.async(function storeToDB$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            setPostProcessing(true);\n            imageData && imageData.map(function _callee(compnent, index) {\n              var imageUrl, response, blob, urlParts, extension, key, postData;\n              return _regeneratorRuntime.async(function _callee$(_context) {\n                while (1) {\n                  switch (_context.prev = _context.next) {\n                    case 0:\n                      imageUrl = compnent.uri;\n                      _context.next = 3;\n                      return _regeneratorRuntime.awrap(fetch(imageUrl));\n\n                    case 3:\n                      response = _context.sent;\n                      _context.next = 6;\n                      return _regeneratorRuntime.awrap(response.blob());\n\n                    case 6:\n                      blob = _context.sent;\n                      urlParts = imageUrl.split(\".\");\n                      extension = urlParts[urlParts.length - 1];\n                      key = uuidv4() + \".\" + extension;\n                      imageAllUrl.push({\n                        imageUri: key\n                      });\n                      _context.next = 13;\n                      return _regeneratorRuntime.awrap(Storage.put(key, blob));\n\n                    case 13:\n                      if (!(imageData.length == index + 1)) {\n                        _context.next = 19;\n                        break;\n                      }\n\n                      postData = {\n                        title: title,\n                        categoryName: category.catName,\n                        categoryID: category.catID,\n                        description: description,\n                        images: JSON.stringify(imageAllUrl),\n                        locationID: Location.locID,\n                        locationName: Location.locName,\n                        owner: userEmail,\n                        rentValue: rentValue,\n                        userID: userID,\n                        commonID: \"1\"\n                      };\n                      _context.next = 17;\n                      return _regeneratorRuntime.awrap(API.graphql({\n                        query: createListing,\n                        variables: {\n                          input: postData\n                        },\n                        authMode: \"AMAZON_COGNITO_USER_POOLS\"\n                      }));\n\n                    case 17:\n                      setPostProcessing(false);\n                      setPostSuccess(\"Your adv have successfully published.\");\n\n                    case 19:\n                    case \"end\":\n                      return _context.stop();\n                  }\n                }\n              }, null, null, null, Promise);\n            });\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var _useState21 = useState(false),\n      _useState22 = _slicedToArray(_useState21, 2),\n      menuToggle = _useState22[0],\n      setMenuToggle = _useState22[1];\n\n  return _jsxs(_Fragment, {\n    children: [_jsx(HeaderForDesktop, {\n      setMenuToggle: setMenuToggle,\n      menuToggle: menuToggle\n    }), _jsx(View, {\n      style: {\n        width: \"100%\",\n        alignItems: \"center\"\n      },\n      children: _jsxs(ScrollView, {\n        style: {\n          margin: 10,\n          width: \"80%\"\n        },\n        children: [_jsxs(View, {\n          children: [_jsx(Text, {\n            style: {\n              marginTop: 10\n            },\n            children: \"Upload images [Max 5 photos]\"\n          }), _jsx(Pressable, {\n            style: {\n              backgroundColor: colors.white,\n              display: \"flex\",\n              justifyContent: \"center\",\n              alignItems: \"center\",\n              marginVertical: 20,\n              height: 150,\n              width: 150,\n              borderWidth: 1,\n              borderStyle: \"dashed\",\n              borderRadius: 30\n            },\n            onPress: function onPress() {\n              navigation.navigate(\"SelectPhoto\");\n            },\n            children: _jsx(AntDesign, {\n              name: \"pluscircle\",\n              size: 24,\n              color: \"black\"\n            })\n          }), _jsx(View, {\n            children: _jsx(ScrollView, {\n              horizontal: true,\n              children: imageData && imageData.map(function (component, index) {\n                return _jsx(Image, {\n                  source: {\n                    uri: component.uri\n                  },\n                  style: {\n                    height: 100,\n                    width: 100,\n                    marginBottom: 20,\n                    marginTop: -5,\n                    marginRight: 5\n                  }\n                }, component.id);\n              })\n            })\n          })]\n        }), _jsxs(Pressable, {\n          style: styles.catStyle,\n          onPress: function onPress() {\n            navigation.navigate(\"SelectCategory\");\n          },\n          children: [_jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\"\n            },\n            children: [_jsx(Octicons, {\n              name: \"settings\",\n              size: 24,\n              color: \"black\"\n            }), _jsx(Text, {\n              style: {\n                fontSize: 16,\n                color: colors.secondary,\n                marginLeft: 5\n              },\n              children: category.catName\n            })]\n          }), _jsx(AntDesign, {\n            name: \"right\",\n            size: 22,\n            color: colors.secondary\n          })]\n        }), _jsxs(Pressable, {\n          onPress: function onPress() {\n            navigation.navigate(\"SelectLocation\");\n          },\n          style: styles.catStyle,\n          children: [_jsxs(View, {\n            style: {\n              flexDirection: \"row\",\n              alignItems: \"center\"\n            },\n            children: [_jsx(MaterialCommunityIcons, {\n              name: \"map-marker\",\n              size: 24,\n              color: colors.secondary\n            }), _jsx(Text, {\n              style: {\n                fontSize: 16,\n                color: colors.secondary,\n                marginLeft: 5\n              },\n              children: Location.locName\n            })]\n          }), _jsx(AntDesign, {\n            name: \"right\",\n            size: 22,\n            color: colors.secondary\n          })]\n        }), _jsxs(View, {\n          style: styles.inputTextStyle,\n          children: [_jsx(MaterialIcons, {\n            name: \"title\",\n            size: 24,\n            color: colors.secondary\n          }), _jsx(TextInput, {\n            placeholder: \"Adv Title\",\n            style: {\n              width: \"100%\"\n            },\n            onChangeText: function onChangeText(text) {\n              return setTitle(text);\n            }\n          })]\n        }), _jsxs(View, {\n          style: styles.inputTextStyle,\n          children: [_jsx(MaterialIcons, {\n            name: \"description\",\n            size: 24,\n            color: colors.secondary\n          }), _jsx(TextInput, {\n            placeholder: \"Write a description\",\n            style: {\n              marginLeft: 5,\n              width: \"100%\"\n            },\n            onChangeText: function onChangeText(text) {\n              return setDescription(text);\n            },\n            multiline: true,\n            numberOfLines: 3\n          })]\n        }), _jsxs(View, {\n          style: [styles.inputTextStyle, {\n            width: \"50%\"\n          }],\n          children: [_jsx(FontAwesome, {\n            name: \"dollar\",\n            size: 24,\n            color: colors.secondary\n          }), _jsx(TextInput, {\n            placeholder: \"Add a value\",\n            style: {\n              marginLeft: 5,\n              width: \"100%\"\n            },\n            onChangeText: function onChangeText(text) {\n              return setRentValue(text);\n            },\n            keyboardType: \"numeric\"\n          })]\n        }), _jsx(Pressable, {\n          onPress: function onPress() {\n            return storeToDB();\n          },\n          android_ripple: {\n            color: \"grey\"\n          },\n          style: {\n            margin: 10,\n            borderRadius: 30,\n            backgroundColor: colors.secondary,\n            alignItems: \"center\",\n            paddingLeft: 20,\n            elevation: 5\n          },\n          children: _jsx(Text, {\n            style: {\n              color: colors.white,\n              paddingVertical: 12,\n              fontSize: 14.5,\n              fontWeight: \"bold\"\n            },\n            children: postProcessing ? \"Processing...\" : \"POST ADV\"\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default withAuthenticator(Listing);","map":{"version":3,"sources":["C:/Users/Km Habib/Documents/GitHub/Rent_Project/rent/src/screens/Listing/index.js"],"names":["React","useState","useEffect","styles","withAuthenticator","Auth","Storage","API","graphqlOperation","AntDesign","colors","Octicons","MaterialCommunityIcons","MaterialIcons","FontAwesome","useNavigation","useRoute","v4","uuidv4","createListing","Listing","navigation","imageData","setImageData","catID","catName","category","setCategory","locID","locName","Location","setLocation","title","setTitle","description","setDescription","rentValue","setRentValue","userID","setUserID","userEmail","setUserEmail","postSuccess","setPostSuccess","postProcessing","setPostProcessing","Alert","alert","text","onPress","navigate","screen","currentAuthenticatedUser","then","user","console","log","attributes","sub","email","catch","err","route","params","undefined","imageAllUrl","storeToDB","map","compnent","index","imageUrl","uri","fetch","response","blob","urlParts","split","extension","length","key","push","imageUri","put","postData","categoryName","categoryID","images","JSON","stringify","locationID","locationName","owner","commonID","graphql","query","variables","input","authMode","menuToggle","setMenuToggle","width","alignItems","margin","marginTop","backgroundColor","white","display","justifyContent","marginVertical","height","borderWidth","borderStyle","borderRadius","component","marginBottom","marginRight","id","catStyle","flexDirection","fontSize","color","secondary","marginLeft","inputTextStyle","paddingLeft","elevation","paddingVertical","fontWeight"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport {\n  StyleSheet,\n  SafeAreaView,\n  Platform,\n  View,\n  Text,\n  Pressable,\n  TextInput,\n  Image,\n  ScrollView,\n  Alert,\n} from \"react-native\";\nimport styles from \"./styles\";\nimport { withAuthenticator } from \"aws-amplify-react-native\";\nimport { Auth, Storage, API, graphqlOperation } from \"aws-amplify\";\nimport { AntDesign } from \"@expo/vector-icons\";\nimport { colors } from \"../../modal/color\";\nimport { Octicons } from \"@expo/vector-icons\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { MaterialIcons } from \"@expo/vector-icons\";\nimport { FontAwesome } from \"@expo/vector-icons\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { useRoute } from \"@react-navigation/native\";\nimport \"react-native-get-random-values\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport { createListing } from \"../../graphql/mutations\";\nconst Listing = () => {\n  const navigation = useNavigation();\n  const [imageData, setImageData] = useState([]);\n  const [category, setCategory] = useState({ catID: 0, catName: \"Category\" });\n  const [Location, setLocation] = useState({ locID: 0, locName: \"Location\" });\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [rentValue, setRentValue] = useState(\"\");\n  const [userID, setUserID] = useState(\"\");\n  const [userEmail, setUserEmail] = useState(\"\");\n  const [postSuccess, setPostSuccess] = useState(\"\");\n  const [postProcessing, setPostProcessing] = useState(false);\n\n  useEffect(() => {\n    if (postSuccess !== \"\") {\n      setPostProcessing(false);\n      Alert.alert(\"Success\", postSuccess, [\n        {\n          text: \"Ok\",\n          onPress: () => navigation.navigate(\"Home\", { screen: \"Explore\" }),\n        },\n      ]);\n    }\n  }, [postSuccess]);\n  Auth.currentAuthenticatedUser()\n    .then((user) => {\n      console.log(\"user id is: \", user.attributes.sub);\n      setUserID(user.attributes.sub);\n      setUserEmail(user.attributes.email);\n    })\n    .catch((err) => {\n      console.log(err);\n      throw err;\n    });\n\n  const route = useRoute();\n  useEffect(() => {\n    if (!route.params) {\n      console.log(\"There is no data in route\");\n    } else {\n      if (route.params.imageData !== undefined) {\n        // console.log(route.params.imageData);\n        setImageData(route.params.imageData);\n      } else if (route.params.catID !== undefined) {\n        setCategory(route.params);\n      } else if (route.params.locID !== undefined) {\n        setLocation(route.params);\n      }\n    }\n  });\n\n  const imageAllUrl = [];\n  const storeToDB = async () => {\n    setPostProcessing(true);\n    imageData &&\n      imageData.map(async (compnent, index) => {\n        const imageUrl = compnent.uri;\n        const response = await fetch(imageUrl);\n        const blob = await response.blob();\n        const urlParts = imageUrl.split(\".\");\n        const extension = urlParts[urlParts.length - 1];\n        const key = `${uuidv4()}.${extension}`;\n        imageAllUrl.push({ imageUri: key });\n        await Storage.put(key, blob);\n\n        if (imageData.length == index + 1) {\n          const postData = {\n            title: title,\n            categoryName: category.catName,\n            categoryID: category.catID,\n            description: description,\n            images: JSON.stringify(imageAllUrl),\n            locationID: Location.locID,\n            locationName: Location.locName,\n            owner: userEmail,\n            rentValue: rentValue,\n            userID: userID,\n            commonID: \"1\",\n          };\n\n          await API.graphql({\n            query: createListing,\n            variables: { input: postData },\n            authMode: \"AMAZON_COGNITO_USER_POOLS\",\n          });\n\n          setPostProcessing(false);\n          setPostSuccess(\"Your adv have successfully published.\");\n        }\n      });\n  };\n  // Auth.signOut();\n  const [menuToggle, setMenuToggle] = useState(false);\n  return (\n    <>\n      <HeaderForDesktop setMenuToggle={setMenuToggle} menuToggle={menuToggle} />\n      <View style={{ width: \"100%\", alignItems: \"center\" }}>\n        <ScrollView style={{ margin: 10, width: \"80%\" }}>\n          <View>\n            <Text style={{ marginTop: 10 }}>Upload images [Max 5 photos]</Text>\n            <Pressable\n              style={{\n                backgroundColor: colors.white,\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                marginVertical: 20,\n                height: 150,\n                width: 150,\n                borderWidth: 1,\n                borderStyle: \"dashed\",\n                borderRadius: 30,\n              }}\n              onPress={() => {\n                navigation.navigate(\"SelectPhoto\");\n              }}>\n              <AntDesign name=\"pluscircle\" size={24} color=\"black\" />\n            </Pressable>\n            <View>\n              <ScrollView horizontal={true}>\n                {imageData &&\n                  imageData.map((component, index) => (\n                    <Image\n                      key={component.id}\n                      source={{ uri: component.uri }}\n                      style={{\n                        height: 100,\n                        width: 100,\n                        marginBottom: 20,\n                        marginTop: -5,\n                        marginRight: 5,\n                      }}\n                    />\n                  ))}\n              </ScrollView>\n            </View>\n          </View>\n          <Pressable\n            style={styles.catStyle}\n            onPress={() => {\n              navigation.navigate(\"SelectCategory\");\n            }}>\n            <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n              <Octicons name=\"settings\" size={24} color=\"black\" />\n              <Text\n                style={{\n                  fontSize: 16,\n                  color: colors.secondary,\n                  marginLeft: 5,\n                }}>\n                {category.catName}\n              </Text>\n            </View>\n            <AntDesign name=\"right\" size={22} color={colors.secondary} />\n          </Pressable>\n          <Pressable\n            onPress={() => {\n              navigation.navigate(\"SelectLocation\");\n            }}\n            style={styles.catStyle}>\n            <View style={{ flexDirection: \"row\", alignItems: \"center\" }}>\n              <MaterialCommunityIcons\n                name=\"map-marker\"\n                size={24}\n                color={colors.secondary}\n              />\n              <Text\n                style={{\n                  fontSize: 16,\n                  color: colors.secondary,\n                  marginLeft: 5,\n                }}>\n                {Location.locName}\n              </Text>\n            </View>\n            <AntDesign name=\"right\" size={22} color={colors.secondary} />\n          </Pressable>\n\n          <View style={styles.inputTextStyle}>\n            <MaterialIcons name=\"title\" size={24} color={colors.secondary} />\n            <TextInput\n              placeholder=\"Adv Title\"\n              style={{ width: \"100%\" }}\n              onChangeText={(text) => setTitle(text)}\n            />\n          </View>\n          <View style={styles.inputTextStyle}>\n            <MaterialIcons\n              name=\"description\"\n              size={24}\n              color={colors.secondary}\n            />\n            <TextInput\n              placeholder=\"Write a description\"\n              style={{ marginLeft: 5, width: \"100%\" }}\n              onChangeText={(text) => setDescription(text)}\n              multiline={true}\n              numberOfLines={3}\n            />\n          </View>\n          <View style={[styles.inputTextStyle, { width: \"50%\" }]}>\n            <FontAwesome name=\"dollar\" size={24} color={colors.secondary} />\n            <TextInput\n              placeholder=\"Add a value\"\n              style={{ marginLeft: 5, width: \"100%\" }}\n              onChangeText={(text) => setRentValue(text)}\n              keyboardType=\"numeric\"\n            />\n          </View>\n          <Pressable\n            onPress={() => storeToDB()}\n            android_ripple={{ color: \"grey\" }}\n            style={{\n              margin: 10,\n              borderRadius: 30,\n              backgroundColor: colors.secondary,\n              alignItems: \"center\",\n              paddingLeft: 20,\n              // marginTop: 150,\n              elevation: 5,\n            }}>\n            <Text\n              style={{\n                color: colors.white,\n                paddingVertical: 12,\n                fontSize: 14.5,\n                fontWeight: \"bold\",\n              }}>\n              {postProcessing ? \"Processing...\" : \"POST ADV\"}\n            </Text>\n          </Pressable>\n        </ScrollView>\n        {/* <MenuDetailsForDesktop menuToggle={menuToggle} top={-20} right={\"9.2%\"} /> */}\n      </View>\n    </>\n  );\n};\n\nexport default withAuthenticator(Listing);\n"]},"metadata":{},"sourceType":"module"}