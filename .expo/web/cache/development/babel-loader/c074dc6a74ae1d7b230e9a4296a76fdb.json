{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4;\n\nimport React, { memo } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport styled from 'styled-components/native';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Item = function Item(_ref) {\n  var id = _ref.id,\n      screen = _ref.screen,\n      cols = _ref.cols,\n      selectedIndex = _ref.selectedIndex,\n      image = _ref.image,\n      mediaType = _ref.mediaType,\n      onClick = _ref.onClick,\n      margin = _ref.margin,\n      selectedIcon = _ref.selectedIcon,\n      videoIcon = _ref.videoIcon;\n\n  var handleClick = function handleClick() {\n    onClick(id);\n  };\n\n  var SelectedIndicator = selectedIcon.Component,\n      SelectedColor = selectedIcon.color,\n      SelectedIconName = selectedIcon.iconName,\n      SelectedIconSize = selectedIcon.size,\n      SelectedIconBg = selectedIcon.bg;\n  var VideoIndicator = videoIcon.Component,\n      VideoIndicatorColor = videoIcon.color,\n      VideoIndicatorName = videoIcon.iconName,\n      VideoIndicatorSize = videoIcon.size;\n  return _jsxs(ItemContainer, {\n    margin: margin,\n    screen: screen,\n    cols: cols,\n    onPress: handleClick,\n    children: [mediaType === 'video' && _jsx(MediaTypeVideo, {\n      margin: margin,\n      children: VideoIndicator && VideoIndicatorName && _jsx(VideoIndicator, {\n        name: VideoIndicatorName,\n        size: VideoIndicatorSize,\n        color: VideoIndicatorColor\n      })\n    }), selectedIndex >= 0 && _jsx(Selected, {\n      selectionColor: SelectedIconBg,\n      margin: margin,\n      children: SelectedIndicator && SelectedIconName && _jsx(SelectedIndicator, {\n        name: SelectedIconName,\n        size: SelectedIconSize,\n        color: SelectedColor,\n        index: selectedIndex\n      })\n    }), _jsx(Image, {\n      source: {\n        uri: image\n      }\n    })]\n  });\n};\n\nvar MemoizedAssetItem = memo(Item);\nexport var AssetList = function AssetList(_ref2) {\n  var margin = _ref2.margin,\n      data = _ref2.data,\n      selectedItems = _ref2.selectedItems,\n      onClick = _ref2.onClick,\n      getMoreAssets = _ref2.getMoreAssets,\n      cols = _ref2.cols,\n      screen = _ref2.screen,\n      selectedIcon = _ref2.selectedIcon,\n      videoIcon = _ref2.videoIcon;\n\n  var _renderItem = function _renderItem(_ref3) {\n    var item = _ref3.item;\n    return _jsx(MemoizedAssetItem, {\n      id: item.id,\n      image: item.uri,\n      mediaType: item.mediaType,\n      selectedIndex: selectedItems.indexOf(item.id),\n      onClick: onClick,\n      cols: cols,\n      screen: screen,\n      margin: margin,\n      selectedIcon: selectedIcon,\n      videoIcon: videoIcon\n    });\n  };\n\n  var _getItemLayout = function _getItemLayout(data, index) {\n    var length = screen / cols;\n    return {\n      length: length,\n      offset: length * index,\n      index: index\n    };\n  };\n\n  return _jsx(FlatList, {\n    data: data,\n    numColumns: cols,\n    initialNumToRender: 50,\n    getItemLayout: _getItemLayout,\n    renderItem: _renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    extraData: selectedItems,\n    onEndReached: function onEndReached() {\n      return getMoreAssets();\n    },\n    onEndReachedThreshold: 0.5\n  });\n};\nvar Image = styled.Image(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"\\n    width: 100%;\\n    height: 100%;\\n\"])));\nvar MediaTypeVideo = styled.View(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"\\n    width: 25%;\\n    justify-content: center;\\n    align-items: center;\\n    height: 25%;\\n    position: absolute;\\n    z-index: 11;\\n    margin: \", \"px;\\n\"])), function (_ref4) {\n  var margin = _ref4.margin;\n  return margin;\n});\nvar Selected = styled.View(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"\\n    position: absolute;\\n    justify-content: center;\\n    align-items: center;\\n    width: 100%;\\n    height: 100%;\\n    z-index: 10;\\n    background-color: \", \";\\n    margin: \", \"px;\\n\"])), function (_ref5) {\n  var selectionColor = _ref5.selectionColor;\n  return selectionColor ? selectionColor : '#B14AC370';\n}, function (_ref6) {\n  var margin = _ref6.margin;\n  return margin;\n});\nvar ItemContainer = styled.TouchableOpacity(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"\\n    width: \", \"px;\\n    height: \", \"px;\\n    padding: \", \"px;\\n\"])), function (_ref7) {\n  var screen = _ref7.screen,\n      cols = _ref7.cols;\n  return screen / cols;\n}, function (_ref8) {\n  var screen = _ref8.screen,\n      cols = _ref8.cols;\n  return screen / cols;\n}, function (_ref9) {\n  var margin = _ref9.margin;\n  return margin;\n});","map":{"version":3,"sources":["C:/Users/Km Habib/Documents/GitHub/Rent_Project/rent/node_modules/expo-images-picker/src/AssetList.tsx"],"names":["React","memo","styled","Item","id","screen","cols","selectedIndex","image","mediaType","onClick","margin","selectedIcon","videoIcon","handleClick","SelectedIndicator","Component","SelectedColor","color","SelectedIconName","iconName","SelectedIconSize","size","SelectedIconBg","bg","VideoIndicator","VideoIndicatorColor","VideoIndicatorName","VideoIndicatorSize","uri","MemoizedAssetItem","AssetList","data","selectedItems","getMoreAssets","_renderItem","item","indexOf","_getItemLayout","index","length","offset","Image","MediaTypeVideo","View","Selected","selectionColor","ItemContainer","TouchableOpacity"],"mappings":"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","sourcesContent":["import React, { memo } from 'react'\nimport { FlatList } from 'react-native'\nimport { Asset } from 'expo-media-library'\nimport styled from 'styled-components/native'\nimport { ItemType, AssetListPropTypes } from './Types'\n\nconst Item = ({\n    id,\n    screen,\n    cols,\n    selectedIndex,\n    image,\n    mediaType,\n    onClick,\n    margin,\n    selectedIcon,\n    videoIcon,\n}: ItemType) => {\n    const handleClick = () => {\n        onClick(id)\n    }\n\n    const {\n        Component: SelectedIndicator,\n        color: SelectedColor,\n        iconName: SelectedIconName,\n        size: SelectedIconSize,\n        bg: SelectedIconBg,\n    } = selectedIcon\n\n    const {\n        Component: VideoIndicator,\n        color: VideoIndicatorColor,\n        iconName: VideoIndicatorName,\n        size: VideoIndicatorSize,\n    } = videoIcon\n\n    return (\n        <ItemContainer\n            margin={margin}\n            screen={screen}\n            cols={cols}\n            onPress={handleClick}\n        >\n            {mediaType === 'video' && (\n                <MediaTypeVideo margin={margin}>\n                    {VideoIndicator && VideoIndicatorName && (\n                        <VideoIndicator\n                            name={VideoIndicatorName}\n                            size={VideoIndicatorSize}\n                            color={VideoIndicatorColor}\n                        />\n                    )}\n                </MediaTypeVideo>\n            )}\n            {selectedIndex >= 0 && (\n                <Selected selectionColor={SelectedIconBg} margin={margin}>\n                    {SelectedIndicator && SelectedIconName && (\n                        <SelectedIndicator\n                            name={SelectedIconName}\n                            size={SelectedIconSize}\n                            color={SelectedColor}\n                            index={selectedIndex}\n                        />\n                    )}\n                </Selected>\n            )}\n            <Image source={{ uri: image }} />\n        </ItemContainer>\n    )\n}\n\nconst MemoizedAssetItem = memo(Item)\n\nexport const AssetList = ({\n    margin,\n    data,\n    selectedItems,\n    onClick,\n    getMoreAssets,\n    cols,\n    screen,\n    selectedIcon,\n    videoIcon,\n}: AssetListPropTypes) => {\n    const _renderItem = ({ item }: { item: Asset }) => (\n        <MemoizedAssetItem\n            id={item.id}\n            image={item.uri}\n            mediaType={item.mediaType}\n            selectedIndex={selectedItems.indexOf(item.id)}\n            onClick={onClick}\n            cols={cols}\n            screen={screen}\n            margin={margin}\n            selectedIcon={selectedIcon}\n            videoIcon={videoIcon}\n        />\n    )\n\n    const _getItemLayout = (\n        data: Asset[] | null | undefined,\n        index: number\n    ) => {\n        let length = screen / cols\n        return { length, offset: length * index, index }\n    }\n\n    return (\n        <FlatList\n            data={data}\n            numColumns={cols}\n            initialNumToRender={50}\n            getItemLayout={_getItemLayout}\n            renderItem={_renderItem}\n            keyExtractor={(item) => item.id}\n            extraData={selectedItems}\n            onEndReached={() => getMoreAssets()}\n            onEndReachedThreshold={0.5}\n        />\n    )\n}\n\nconst Image = styled.Image`\n    width: 100%;\n    height: 100%;\n`\n\nconst MediaTypeVideo = styled.View<{ margin: number }>`\n    width: 25%;\n    justify-content: center;\n    align-items: center;\n    height: 25%;\n    position: absolute;\n    z-index: 11;\n    margin: ${({ margin }) => margin}px;\n`\nconst Selected = styled.View<{ margin: number; selectionColor: string }>`\n    position: absolute;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 100%;\n    z-index: 10;\n    background-color: ${({ selectionColor }) =>\n        selectionColor ? selectionColor : '#B14AC370'};\n    margin: ${({ margin }) => margin}px;\n`\n\nconst ItemContainer = styled.TouchableOpacity<{\n    margin: number\n    screen: number\n    cols: number\n}>`\n    width: ${({ screen, cols }) => screen / cols}px;\n    height: ${({ screen, cols }) => screen / cols}px;\n    padding: ${({ margin }) => margin}px;\n`\n"]},"metadata":{},"sourceType":"module"}