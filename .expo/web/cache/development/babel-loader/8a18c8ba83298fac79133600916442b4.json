{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { listRentOrders } from \"../../graphql/queries\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar BorrowerScreen = function BorrowerScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      newItems = _useState2[0],\n      setNewItems = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userID = _useState4[0],\n      setUserID = _useState4[1];\n\n  Auth.currentAuthenticatedUser().then(function (user) {\n    console.log(\"user id is: \", user.attributes.sub);\n    setUserID(user.attributes.sub);\n    setUserEmail(user.attributes.email);\n  }).catch(function (err) {\n    console.log(err);\n    throw err;\n  });\n\n  var fetchAll = function fetchAll() {\n    var orderList;\n    return _regeneratorRuntime.async(function fetchAll$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql({\n              query: listRentOrders,\n              variables: {\n                filter: {\n                  borrowerUserId: {\n                    eq: userID\n                  }\n                }\n              }\n            }));\n\n          case 3:\n            orderList = _context.sent;\n            setNewItems(orderList.data.listRentOrders.items);\n            _context.next = 10;\n            break;\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  useEffect(function () {\n    fetchAll();\n  }, []);\n  return _jsx(View, {\n    children: _jsx(FlatList, {\n      data: newItems,\n      renderItem: function renderItem(_ref) {\n        var item = _ref.item;\n        return _jsx(BorrowerHeadScreen, {\n          BorrowerHead: item\n        });\n      }\n    })\n  });\n};\n\nexport default BorrowerScreen;","map":{"version":3,"sources":["C:/Users/Km Habib/Documents/GitHub/Rent_Project/rent/src/screens/borrower/index.js"],"names":["React","listRentOrders","BorrowerScreen","useState","newItems","setNewItems","userID","setUserID","Auth","currentAuthenticatedUser","then","user","console","log","attributes","sub","setUserEmail","email","catch","err","fetchAll","API","graphql","query","variables","filter","borrowerUserId","eq","orderList","data","items","useEffect","item"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,cAAT;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,kBAAgCC,QAAQ,CAAC,EAAD,CAAxC;AAAA;AAAA,MAAOC,QAAP;AAAA,MAAiBC,WAAjB;;AACA,mBAA4BF,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOG,MAAP;AAAA,MAAeC,SAAf;;AACAC,EAAAA,IAAI,CAACC,wBAAL,GACGC,IADH,CACQ,UAACC,IAAD,EAAU;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BF,IAAI,CAACG,UAAL,CAAgBC,GAA5C;AACAR,IAAAA,SAAS,CAACI,IAAI,CAACG,UAAL,CAAgBC,GAAjB,CAAT;AACAC,IAAAA,YAAY,CAACL,IAAI,CAACG,UAAL,CAAgBG,KAAjB,CAAZ;AACD,GALH,EAMGC,KANH,CAMS,UAACC,GAAD,EAAS;AACdP,IAAAA,OAAO,CAACC,GAAR,CAAYM,GAAZ;AACA,UAAMA,GAAN;AACD,GATH;;AAUA,MAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEWC,GAAG,CAACC,OAAJ,CAAY;AAClCC,cAAAA,KAAK,EAAEtB,cAD2B;AAElCuB,cAAAA,SAAS,EAAE;AACTC,gBAAAA,MAAM,EAAE;AACNC,kBAAAA,cAAc,EAAE;AAAEC,oBAAAA,EAAE,EAAErB;AAAN;AADV;AADC;AAFuB,aAAZ,CAFX;;AAAA;AAEPsB,YAAAA,SAFO;AAWbvB,YAAAA,WAAW,CAACuB,SAAS,CAACC,IAAV,CAAe5B,cAAf,CAA8B6B,KAA/B,CAAX;AAXa;AAAA;;AAAA;AAAA;AAAA;AAablB,YAAAA,OAAO,CAACC,GAAR;;AAba;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAjB;;AAgBAkB,EAAAA,SAAS,CAAC,YAAM;AACdX,IAAAA,QAAQ;AACT,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,KAAC,IAAD;AAAA,cACE,KAAC,QAAD;AACE,MAAA,IAAI,EAAEhB,QADR;AAEE,MAAA,UAAU,EAAE;AAAA,YAAG4B,IAAH,QAAGA,IAAH;AAAA,eAAc,KAAC,kBAAD;AAAoB,UAAA,YAAY,EAAEA;AAAlC,UAAd;AAAA;AAFd;AADF,IADF;AAQD,CAzCD;;AA0CA,eAAe9B,cAAf","sourcesContent":["import React from \"react\";\r\nimport { View, Text, FlatList } from \"react-native\";\r\nimport { listRentOrders } from \"../../graphql/queries\";\r\nconst BorrowerScreen = () => {\r\n  const [newItems, setNewItems] = useState([]);\r\n  const [userID, setUserID] = useState(\"\");\r\n  Auth.currentAuthenticatedUser()\r\n    .then((user) => {\r\n      console.log(\"user id is: \", user.attributes.sub);\r\n      setUserID(user.attributes.sub);\r\n      setUserEmail(user.attributes.email);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err);\r\n      throw err;\r\n    });\r\n  const fetchAll = async () => {\r\n    try {\r\n      const orderList = await API.graphql({\r\n        query: listRentOrders,\r\n        variables: {\r\n          filter: {\r\n            borrowerUserId: { eq: userID },\r\n          },\r\n        },\r\n      });\r\n\r\n      setNewItems(orderList.data.listRentOrders.items);\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    fetchAll();\r\n  }, []);\r\n\r\n  return (\r\n    <View>\r\n      <FlatList\r\n        data={newItems}\r\n        renderItem={({ item }) => <BorrowerHeadScreen BorrowerHead={item} />}\r\n      />\r\n    </View>\r\n  );\r\n};\r\nexport default BorrowerScreen;\r\n"]},"metadata":{},"sourceType":"module"}