{"ast":null,"code":"import React, { useMemo } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { AssetsSelector } from \"expo-images-picker\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { MediaType } from \"expo-media-library\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar SelectPhotosScreen = function SelectPhotosScreen() {\n  var navigation = useNavigation();\n\n  var _onSuccess = function onSuccess(data) {\n    navigation.navigate(\"Listing\", {\n      imageData: data\n    });\n  };\n\n  var widgetErrors = useMemo(function () {\n    return {\n      errorTextColor: \"black\",\n      errorMessages: {\n        hasErrorWithPermissions: \"Please Allow media gallery permissions.\",\n        hasErrorWithLoading: \"There was error while loading images.\",\n        hasErrorWithResizing: \"There was error while loading images.\",\n        hasNoAssets: \"No images found.\"\n      }\n    };\n  }, []);\n  var widgetSettings = useMemo(function () {\n    return {\n      getImageMetaData: false,\n      initialLoad: 100,\n      assetsType: [MediaType.photo, MediaType.video],\n      minSelection: 1,\n      maxSelection: 5,\n      portraitCols: 2,\n      landscapeCols: 4\n    };\n  }, []);\n  var widgetResize = useMemo(function () {\n    return {\n      width: 50,\n      compress: 0.7,\n      base64: false,\n      saveTo: \"jpeg\"\n    };\n  }, []);\n  var _textStyle = {\n    color: \"white\"\n  };\n  var _buttonStyle = {\n    backgroundColor: \"orange\",\n    borderRadius: 5\n  };\n  var widgetNavigator = useMemo(function () {\n    return {\n      Texts: {\n        finish: \"finish\",\n        back: \"back\",\n        selected: \"selected\"\n      },\n      midTextColor: \"black\",\n      minSelection: 1,\n      buttonTextStyle: _textStyle,\n      buttonStyle: _buttonStyle,\n      onBack: function onBack() {\n        navigation.navigate(\"Listing\");\n      },\n      onSuccess: function onSuccess(e) {\n        return _onSuccess(e);\n      }\n    };\n  }, []);\n  var widgetStyles = useMemo(function () {\n    return {\n      margin: 2,\n      bgColor: \"white\",\n      spinnerColor: \"blue\",\n      widgetWidth: 99,\n      videoIcon: {\n        Component: Ionicons,\n        iconName: \"ios-videocam\",\n        color: \"tomato\",\n        size: 20\n      },\n      selectedIcon: {\n        Component: Ionicons,\n        iconName: \"ios-checkmark-circle-outline\",\n        color: \"white\",\n        bg: \"#0eb14970\",\n        size: 26\n      }\n    };\n  }, []);\n  return _jsx(View, {\n    style: styles.container,\n    children: _jsx(AssetsSelector, {\n      Settings: widgetSettings,\n      Errors: widgetErrors,\n      Styles: widgetStyles,\n      Navigator: widgetNavigator\n    })\n  });\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  }\n});\nexport default SelectPhotosScreen;","map":{"version":3,"sources":["C:/Users/Km Habib/Documents/GitHub/Rent_Project/rent/src/screens/selectPhotos/index.js"],"names":["React","useMemo","AssetsSelector","Ionicons","MediaType","useNavigation","SelectPhotosScreen","navigation","onSuccess","data","navigate","imageData","widgetErrors","errorTextColor","errorMessages","hasErrorWithPermissions","hasErrorWithLoading","hasErrorWithResizing","hasNoAssets","widgetSettings","getImageMetaData","initialLoad","assetsType","photo","video","minSelection","maxSelection","portraitCols","landscapeCols","widgetResize","width","compress","base64","saveTo","_textStyle","color","_buttonStyle","backgroundColor","borderRadius","widgetNavigator","Texts","finish","back","selected","midTextColor","buttonTextStyle","buttonStyle","onBack","e","widgetStyles","margin","bgColor","spinnerColor","widgetWidth","videoIcon","Component","iconName","size","selectedIcon","bg","styles","container","StyleSheet","create","flex"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,OAAhB,QAA+B,OAA/B;;;;;;AAEA,SAASC,cAAT,QAA+B,oBAA/B;AACA,SAASC,QAAT,QAAyB,oBAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,aAAT,QAA8B,0BAA9B;;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,GAAM;AAC/B,MAAMC,UAAU,GAAGF,aAAa,EAAhC;;AACA,MAAMG,UAAS,GAAG,SAAZA,SAAY,CAACC,IAAD,EAAe;AAC/BF,IAAAA,UAAU,CAACG,QAAX,CAAoB,SAApB,EAA+B;AAAEC,MAAAA,SAAS,EAAEF;AAAb,KAA/B;AACD,GAFD;;AAIA,MAAMG,YAAY,GAAGX,OAAO,CAC1B;AAAA,WAAO;AACLY,MAAAA,cAAc,EAAE,OADX;AAELC,MAAAA,aAAa,EAAE;AACbC,QAAAA,uBAAuB,EAAE,yCADZ;AAEbC,QAAAA,mBAAmB,EAAE,uCAFR;AAGbC,QAAAA,oBAAoB,EAAE,uCAHT;AAIbC,QAAAA,WAAW,EAAE;AAJA;AAFV,KAAP;AAAA,GAD0B,EAU1B,EAV0B,CAA5B;AAaA,MAAMC,cAAc,GAAGlB,OAAO,CAC5B;AAAA,WAAO;AACLmB,MAAAA,gBAAgB,EAAE,KADb;AAELC,MAAAA,WAAW,EAAE,GAFR;AAGLC,MAAAA,UAAU,EAAE,CAAClB,SAAS,CAACmB,KAAX,EAAkBnB,SAAS,CAACoB,KAA5B,CAHP;AAILC,MAAAA,YAAY,EAAE,CAJT;AAKLC,MAAAA,YAAY,EAAE,CALT;AAMLC,MAAAA,YAAY,EAAE,CANT;AAOLC,MAAAA,aAAa,EAAE;AAPV,KAAP;AAAA,GAD4B,EAU5B,EAV4B,CAA9B;AAaA,MAAMC,YAAY,GAAG5B,OAAO,CAC1B;AAAA,WAAO;AACL6B,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,QAAQ,EAAE,GAFL;AAGLC,MAAAA,MAAM,EAAE,KAHH;AAILC,MAAAA,MAAM,EAAE;AAJH,KAAP;AAAA,GAD0B,EAO1B,EAP0B,CAA5B;AAUA,MAAMC,UAAU,GAAG;AACjBC,IAAAA,KAAK,EAAE;AADU,GAAnB;AAIA,MAAMC,YAAY,GAAG;AACnBC,IAAAA,eAAe,EAAE,QADE;AAEnBC,IAAAA,YAAY,EAAE;AAFK,GAArB;AAKA,MAAMC,eAAe,GAAGtC,OAAO,CAC7B;AAAA,WAAO;AACLuC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE,QADH;AAELC,QAAAA,IAAI,EAAE,MAFD;AAGLC,QAAAA,QAAQ,EAAE;AAHL,OADF;AAMLC,MAAAA,YAAY,EAAE,OANT;AAOLnB,MAAAA,YAAY,EAAE,CAPT;AAQLoB,MAAAA,eAAe,EAAEX,UARZ;AASLY,MAAAA,WAAW,EAAEV,YATR;AAULW,MAAAA,MAAM,EAAE,kBAAM;AACZxC,QAAAA,UAAU,CAACG,QAAX,CAAoB,SAApB;AACD,OAZI;AAaLF,MAAAA,SAAS,EAAE,mBAACwC,CAAD;AAAA,eAAYxC,UAAS,CAACwC,CAAD,CAArB;AAAA;AAbN,KAAP;AAAA,GAD6B,EAgB7B,EAhB6B,CAA/B;AAmBA,MAAMC,YAAY,GAAGhD,OAAO,CAC1B;AAAA,WAAO;AACLiD,MAAAA,MAAM,EAAE,CADH;AAELC,MAAAA,OAAO,EAAE,OAFJ;AAGLC,MAAAA,YAAY,EAAE,MAHT;AAILC,MAAAA,WAAW,EAAE,EAJR;AAKLC,MAAAA,SAAS,EAAE;AACTC,QAAAA,SAAS,EAAEpD,QADF;AAETqD,QAAAA,QAAQ,EAAE,cAFD;AAGTrB,QAAAA,KAAK,EAAE,QAHE;AAITsB,QAAAA,IAAI,EAAE;AAJG,OALN;AAWLC,MAAAA,YAAY,EAAE;AACZH,QAAAA,SAAS,EAAEpD,QADC;AAEZqD,QAAAA,QAAQ,EAAE,8BAFE;AAGZrB,QAAAA,KAAK,EAAE,OAHK;AAIZwB,QAAAA,EAAE,EAAE,WAJQ;AAKZF,QAAAA,IAAI,EAAE;AALM;AAXT,KAAP;AAAA,GAD0B,EAoB1B,EApB0B,CAA5B;AAuBA,SACE,KAAC,IAAD;AAAM,IAAA,KAAK,EAAEG,MAAM,CAACC,SAApB;AAAA,cACE,KAAC,cAAD;AACE,MAAA,QAAQ,EAAE1C,cADZ;AAEE,MAAA,MAAM,EAAEP,YAFV;AAGE,MAAA,MAAM,EAAEqC,YAHV;AAIE,MAAA,SAAS,EAAEV;AAJb;AADF,IADF;AAUD,CAvGD;;AAyGA,IAAMqB,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BF,EAAAA,SAAS,EAAE;AACTG,IAAAA,IAAI,EAAE;AADG;AADoB,CAAlB,CAAf;AAMA,eAAe1D,kBAAf","sourcesContent":["import React, { useMemo } from \"react\";\nimport { Text, View, StyleSheet, SafeAreaView, Alert } from \"react-native\";\nimport { AssetsSelector } from \"expo-images-picker\";\nimport { Ionicons } from \"@expo/vector-icons\";\nimport { MediaType } from \"expo-media-library\";\nimport { useNavigation } from \"@react-navigation/native\";\n\nconst SelectPhotosScreen = () => {\n  const navigation = useNavigation();\n  const onSuccess = (data: any) => {\n    navigation.navigate(\"Listing\", { imageData: data });\n  };\n\n  const widgetErrors = useMemo(\n    () => ({\n      errorTextColor: \"black\",\n      errorMessages: {\n        hasErrorWithPermissions: \"Please Allow media gallery permissions.\",\n        hasErrorWithLoading: \"There was error while loading images.\",\n        hasErrorWithResizing: \"There was error while loading images.\",\n        hasNoAssets: \"No images found.\",\n      },\n    }),\n    []\n  );\n\n  const widgetSettings = useMemo(\n    () => ({\n      getImageMetaData: false, // true might perform slower results\n      initialLoad: 100,\n      assetsType: [MediaType.photo, MediaType.video],\n      minSelection: 1,\n      maxSelection: 5,\n      portraitCols: 2,\n      landscapeCols: 4,\n    }),\n    []\n  );\n\n  const widgetResize = useMemo(\n    () => ({\n      width: 50,\n      compress: 0.7,\n      base64: false,\n      saveTo: \"jpeg\",\n    }),\n    []\n  );\n\n  const _textStyle = {\n    color: \"white\",\n  };\n\n  const _buttonStyle = {\n    backgroundColor: \"orange\",\n    borderRadius: 5,\n  };\n\n  const widgetNavigator = useMemo(\n    () => ({\n      Texts: {\n        finish: \"finish\",\n        back: \"back\",\n        selected: \"selected\",\n      },\n      midTextColor: \"black\",\n      minSelection: 1,\n      buttonTextStyle: _textStyle,\n      buttonStyle: _buttonStyle,\n      onBack: () => {\n        navigation.navigate(\"Listing\");\n      },\n      onSuccess: (e: any) => onSuccess(e),\n    }),\n    []\n  );\n\n  const widgetStyles = useMemo(\n    () => ({\n      margin: 2,\n      bgColor: \"white\",\n      spinnerColor: \"blue\",\n      widgetWidth: 99,\n      videoIcon: {\n        Component: Ionicons,\n        iconName: \"ios-videocam\",\n        color: \"tomato\",\n        size: 20,\n      },\n      selectedIcon: {\n        Component: Ionicons,\n        iconName: \"ios-checkmark-circle-outline\",\n        color: \"white\",\n        bg: \"#0eb14970\",\n        size: 26,\n      },\n    }),\n    []\n  );\n\n  return (\n    <View style={styles.container}>\n      <AssetsSelector\n        Settings={widgetSettings}\n        Errors={widgetErrors}\n        Styles={widgetStyles}\n        Navigator={widgetNavigator}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default SelectPhotosScreen;\n"]},"metadata":{},"sourceType":"module"}